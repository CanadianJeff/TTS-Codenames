-- UI elements for the table

-- Tracks the players currently in queue
queue = {}

-- Tracks color switching
seatTracker =
{
  ["Blue"]    = false,
  ["Teal"]    = false,
  ["Purple"]  = false,
  ["Green"]   = false,
  ["White"]   = false,

  ["Red"]     = false,
  ["Orange"]  = false,
  ["Yellow"]  = false,
  ["Pink"]    = false,
  ["Brown"]   = false
}

redColor = {0.856, 0.1, 0.094}

function onLoad(saveState)
  if saveState != "" then
    local decodedSaveState = JSON.decode(saveState)

    queue = decodedSaveState.queue
    updateQueue()
  end

  -- Update the tracker with vacant seats and show buttons for available seats
  for seatColor,_ in pairs(seatTracker) do
    if Player[seatColor].seated then
      seatTracker[seatColor] = true
    else
      seatTracker[seatColor] = false

      -- Show the button to switch seats
      self.UI.setAttribute("sit" .. seatColor, "active", true)
    end
  end
end

function onSave()
  local saveData = {}

  saveData.queue  = queue

  return JSON.encode(saveData)
end

function votePass(player)
  Global.call("votePass", player.color)
end

function onPlayerChangeColor(color)
  local switcherEnabled = Global.call("getSwitcher")

  if not switcherEnabled then
    return
  end

  for seatColor,_ in pairs(seatTracker) do
    if Player[seatColor].seated != seatTracker[seatColor] then
      seatTracker[seatColor] = Player[seatColor].seated
      self.UI.setAttribute("sit" .. seatColor, "active", not seatTracker[seatColor])
    end
  end
end

function onPlayerConnect(player)
  for _,queuePlayer in ipairs(queue) do
    if queuePlayer.steam_id == player.steam_id then
      queuePlayer.steam_name = player.steam_name
      updateQueue()
      break
    end
  end
end

function updateSettings()
  shuffle(nil,     Global.call("getShuffle") == true and "True" or "False")
  queues(nil,      Global.call("getQueue") == true and "True" or "False")
  switcher(nil,    Global.call("getSwitcher") == true and "True" or "False")
  tilting(nil,     Global.call("getTilting") == true and "True" or "False")
  --afk(player)
  --afkTime(player)
  timer(nil,       Global.call("getTimer") == true and "True" or "False")
  timer1Time(nil,  Global.call("getTimer1Time"))
  timer2Time(nil,  Global.call("getTimer2Time"))
  autokick(nil,    Global.call("getAutokick") == true and "True" or "False")
end

function ignoreChanges(request)
  Global.call("ignoreChanges", request)
end


---------------------------------------------------------------
--------------------[ GAME SETTINGS PANEL ]--------------------
---------------------------------------------------------------
function shuffle(player, enabled)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("shuffle", "isOn", self.UI.getAttribute("shuffle", "isOn"))
    player.broadcast("Only promoted players may change game settings!", redColor)
    return
  end

  -- Handle in the Global script
  Global.call("setShuffle", toboolean(enabled))

  -- Update the view for everyone
  self.UI.setAttribute("shuffle", "isOn", toboolean(enabled))
end

function queues(player, enabled)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("queues", "isOn", self.UI.getAttribute("queues", "isOn"))
    player.broadcast("Only promoted players may change game settings!", redColor)
    return
  end

  -- Handle in the Global script
  Global.call("setQueue", toboolean(enabled))

  -- Hide/show the queue
  self.UI.setAttribute("codemasterQueue", "active", toboolean(enabled))
  if not enabled then
    queue = {}
  end
  updateQueue()

  -- Update the view for everyone
  self.UI.setAttribute("queues", "isOn", toboolean(enabled))
end

function switcher(player, enabled)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("switcher", "isOn", self.UI.getAttribute("switcher", "isOn"))
    player.broadcast("Only promoted players may change game settings!", redColor)
    return
  end

  -- Handle in the Global script
  Global.call("setSwitcher", toboolean(enabled))

  local colors =
  {
    "Blue",
    "Red",
    "Teal",
    "Orange",
    "Purple",
    "Yellow",
    "Green",
    "Pink",
    "White",
    "Brown"
  }
  for _, color in ipairs(colors) do
    if toboolean(enabled) then
      if Player[color].seated then
        self.UI.setAttribute("sit" .. color, "active", false)
      else
        self.UI.setAttribute("sit" .. color, "active", toboolean(enabled))
      end
    else
      self.UI.setAttribute("sit" .. color, "active", toboolean(enabled))
    end
  end

  -- Update the view for everyone
  self.UI.setAttribute("switcher", "isOn", toboolean(enabled))
end

function tilting(player, enabled)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("tilting", "isOn", self.UI.getAttribute("tilting", "isOn"))
    player.broadcast("Only promoted players may change game settings!", redColor)
    return
  end

  -- Handle in the Global script
  Global.call("setTilting", toboolean(enabled))

  -- Update the view for everyone
  self.UI.setAttribute("tilting", "isOn", toboolean(enabled))
end

function stars(player, enabled)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("stars", "isOn", self.UI.getAttribute("stars", "isOn"))
    player.broadcast("Only promoted players may change game settings!", redColor)
    return
  end

  -- Handle in the Global script
  Global.call("setStars", toboolean(enabled))

  -- Update the view for everyone
  self.UI.setAttribute("stars", "isOn", toboolean(enabled))
end

function lighting(player, enabled)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("lighting", "isOn", self.UI.getAttribute("lighting", "isOn"))
    player.broadcast("Only promoted players may change game settings!", redColor)
    return
  end

  -- Handle in the Global script
  Global.call("setLighting", toboolean(enabled))

  -- Update the view for everyone
  self.UI.setAttribute("lighting", "isOn", toboolean(enabled))
end

function afk(player)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("afk", "isOn", self.UI.getAttribute("afk", "isOn"))
    player.broadcast("Only promoted players may change game settings!", redColor)
    return
  end

  -- Handle in the Global script
  Global.call("setAfk", toboolean(enabled))

  -- Update the promoted player view
  self.UI.setAttribute("afk", "isOn", toboolean(enabled))
end

function afkTime(player)
  if player ~= nil and not player.admin then
    return
  end
end

function timer(player, enabled)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("timer", "isOn", self.UI.getAttribute("timer", "isOn"))
    player.broadcast("Only promoted players may change game settings!", redColor)
    return
  end

  -- Handle in the Global script
  Global.call("setTimer", toboolean(enabled))

  -- Update the view for everyone
  self.UI.setAttribute("timer", "isOn", toboolean(enabled))
end

function timer1Time(player, value)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("timer1Time", "value", self.UI.getAttribute("timer1Time", "value"))
    player.broadcast("Only promoted players may change game settings!", redColor)
    return
  end

  -- Handle in the Global script
  Global.call("setTimer1Time", tonumber(value))

  -- Update the view for everyone
  self.UI.setAttribute("timer1Time", "value", tonumber(value))
  self.UI.setAttribute("timer1TimeValue", "text", value)
end

function timer2Time(player, value)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("timer2Time", "value", self.UI.getAttribute("timer2Time", "value"))
    player.broadcast("Only promoted players may change game settings!", redColor)
    return
  end

  -- Handle in the Global script
  Global.call("setTimer2Time", tonumber(value))

  -- Update the view for everyone
  self.UI.setAttribute("timer2Time", "value", tonumber(value))
  self.UI.setAttribute("timer2TimeValue", "text", value)
end

function autokick(player, enabled)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("autokick", "isOn", self.UI.getAttribute("autokick", "isOn"))
    player.broadcast("Only promoted players may change game settings!", redColor)
    return
  end

  -- Handle in the Global script
  Global.call("setAutokick", toboolean(enabled))

  -- Update the view for everyone
  self.UI.setAttribute("autokick", "isOn", toboolean(enabled))
end


---------------------------------------------------------------
--------------------[ DECK SELECTOR PANEL ]--------------------
---------------------------------------------------------------
function fetch(player, deck)
  if player.color == "Grey" then
    return
  end

  if player.color == "Red" or player.color == "Blue" or player.admin then
    Global.call("fetchDeck", tonumber(deck))
  else
    player.broadcast("Only Codemasters or promoted players may select a deck!", redColor)
  end
end

function startGame(player, button)
  if player.color == "Grey" or button ~= "-1" then
    return
  end

  if player.color == "Red" or player.color == "Blue" or player.admin then
    Global.call("newGame", player)
  else
    player.broadcast("Only Codemasters or promoted players may start the game!", redColor)
  end
end


------------------------------------------------------------------
--------------------[ CODEMASTER QUEUE PANEL ]--------------------
------------------------------------------------------------------
function join(player, button)
  if button ~= "-1" then
    return
  end

  if player.color == "Grey" or player.color == "Black" then
    player.broadcast("Only seated players may join the queue!", redColor)
    return
  end

  -- Check to see if the player already exists in the queue
  for _,queuePlayer in ipairs(queue) do
    if queuePlayer.steam_id == player.steam_id then
      if queuePlayer.stay then
        queuePlayer.stay = false
        updateQueue()
      end
      return
    end
  end

  if #queue >= 10 then
    player.broadcast("Codemaster queue is full. Please wait until someone leaves or is removed!", redColor)
    return
  end

  -- Join the player to the queue and make them stay
  table.insert(queue, {
    steam_id   = player.steam_id,
    steam_name = player.steam_name,
    stay       = false
  })
  updateQueue()
end

function stay(player, button)
  if button ~= "-1" then
    return
  end

  if player.color == "Grey" or player.color == "Black" then
    player.broadcast("Only seated players may join the queue!", redColor)
    return
  end

  -- Check to see if the player already exists in the queue
  for _,queuePlayer in ipairs(queue) do
    if queuePlayer.steam_id == player.steam_id then
      if not queuePlayer.stay then
        queuePlayer.stay = true
        updateQueue()
      end
      return
    end
  end

  if #queue >= 10 then
    player.broadcast("Codemaster queue is full. Please wait until someone leaves or is removed!", redColor)
    return
  end

  -- Join the player to the queue and make them stay
  table.insert(queue, {
    steam_id   = player.steam_id,
    steam_name = player.steam_name,
    stay       = true
  })
  updateQueue()
end

function leave(player, button)
  if button ~= "-1" then
    return
  end

  if player.color == "Grey" or player.color == "Black" then
    player.broadcast("Only seated players may leave the queue!", redColor)
    return
  end

  -- Check to see if the player already exists in the queue
  for i, queuePlayer in ipairs(queue) do
    if queuePlayer.steam_id == player.steam_id then
      table.remove(queue, i)
      updateQueue()
      return
    end
  end
end

function remove(player, queuePosition)
  if player ~= nil and not player.admin then
    player.broadcast("Only promoted players may remove player from the queue!", redColor)
    return
  end

  -- Remove this player from the queue
  local removedPlayer = findPlayerBySteamID(table.remove(queue, queuePosition).steam_id)
  updateQueue()

  if removedPlayer ~= nil then
    -- Notify the player they've been removed
    removedPlayer.broadcast(player.steam_name .. " has removed you from the codemaster queue!", redColor)
  end
end


----------------------------------------------------------
--------------------[ COLOR SWITCHER ]--------------------
----------------------------------------------------------
function changeSeat(player, to)
  if player.color == "Grey" or player.color == "Black" then
    return
  end

  -- Ensure the seat is empty
  if Player[to].seated then
    player.broadcast(to .. " seat is not empty!", redColor)
    return
  end

  ignoreChanges({steamID = player.steam_id, color = to})

  player.changeColor(to)
end


-------------------------------------------------------------
--------------------[ UTILITY FUNCTIONS ]--------------------
-------------------------------------------------------------
function toboolean(string)
  if string == "True" then
    return true
  elseif string == "False" then
    return false
  else
    return nil
  end
end

----------------------------------------------------------------------------------------------------------------------
function updateQueue()
  for i=1,10,1 do
    if queue[i] ~= nil then
      self.UI.setAttribute("queueText" .. i, "text", queue[i].steam_name)
      self.UI.setAttributes("queueButton" .. i, {
        active  = true,
        color   = queue[i].stay and "#96e592" or "White"
      })
    else
      self.UI.setAttributes("queueButton" .. i, {
        active  = false,
        color   = "White"
      })
      self.UI.setAttribute("queueText" .. i, "text", "")
    end
  end
end

function shufflePlayers()

  -- Whether or not the codemaster queue is enabled
  local queueEnabled = Global.call("getQueue")

  -- Colors to use when sitting people
  local colorPool =
  {
    "Blue",
    "Red",
    "Teal",
    "Orange",
    "Purple",
    "Yellow",
    "Green",
    "Pink",
    "White",
    "Brown"
  }
  local colors = {}

  -- Get all current seated players to shuffle and stand them
  local seatedPlayers = {}
  for _, player in ipairs(Player.getPlayers()) do
    if player.color ~= "Grey" and player.color ~= "Black" then
      table.insert(seatedPlayers, player)
      player.changeColor("Grey")
      coroutine.yield(0)

      -- Add a color to the list of colors
      table.insert(colors, (#seatedPlayers % 2 == 0) and table.remove(colorPool, 1) or table.remove(colorPool, math.random(1, 2)))
    end
  end

  local requeue = {}
  local numCodemasters = 0

  while #seatedPlayers > 0 do
    local nextPlayer
    if queueEnabled and numCodemasters < 2 and #queue > 0 then
      -- Draw from the queue first
      local nextInQueue
      while #queue > 0 do
        nextInQueue = table.remove(queue, 1)
        nextPlayer = findPlayerBySteamID(nextInQueue.steam_id)

        if nextPlayer ~= nil then
          -- Check to see they were seated
          local seated = false
          for i, player in ipairs(seatedPlayers) do
            if player.steam_id == nextPlayer.steam_id then
              seated = true
              table.remove(seatedPlayers, i)
              break
            end
          end

          if seated and not nextPlayer.blindfolded then
            if nextInQueue.stay then
              table.insert(requeue, nextPlayer)
            end
            -- We found a valid player - break
            numCodemasters = numCodemasters + 1
            break
          else
            nextPlayer.broadcast("You were removed from the codemaster queue because you were either not sitting for your turn or were AFK!", redColor)
          end
        end
      end
    elseif #seatedPlayers > 0 then
      nextPlayer = table.remove(seatedPlayers, math.random(1, #seatedPlayers))
    else
      -- No more players to seat
      break
    end

    -- Seat the next player
    nextPlayer.changeColor(table.remove(colors, 1))
    coroutine.yield(0)
  end

  -- Requeue players if unnecessary
  for _, requeuePlayer in ipairs(requeue) do
    table.insert(queue, {
      steam_id   = requeuePlayer.steam_id,
      steam_name = requeuePlayer.steam_name,
      stay       = true
    })
  end
  updateQueue()
  Global.call("startGame")
  return 1
end

function swapCodemasters()

  local colorPool =
  {
    "Blue",
    "Red"
  }

  local requeue = {}

  local nextInQueue
  while #queue > 0 and #colorPool > 0 do
    nextInQueue = table.remove(queue, 1)
    nextPlayer = findPlayerBySteamID(nextInQueue.steam_id)

    if nextPlayer ~= nil then
      -- Check to see they were seated
      if nextPlayer.seated and not nextPlayer.blindfolded then
        if nextInQueue.stay then
          table.insert(requeue, nextPlayer)
        end
        -- We found a valid player - break
        local codemasterSeat = table.remove(colorPool, math.random(1, #colorPool))
        local oldCodemaster = Player[codemasterSeat]
        if oldCodemaster.seated then
          local switchColor = nextPlayer.color
          nextPlayer.changeColor("Grey")
          coroutine.yield(0)
          oldCodemaster.changeColor(switchColor)
          coroutine.yield(0)
        end
        nextPlayer.changeColor(codemasterSeat)
        coroutine.yield(0)
      else
        nextPlayer.broadcast("You were removed from the codemaster queue because you were either not sitting for your turn or were AFK!", redColor)
      end
    end
  end

  -- Requeue players if unnecessary
  for _, requeuePlayer in ipairs(requeue) do
    table.insert(queue, {
      steam_id   = requeuePlayer.steam_id,
      steam_name = requeuePlayer.steam_name,
      stay       = true
    })
  end
  updateQueue()
  Global.call("startGame")
  return 1
end

function findPlayerBySteamID(steam_id)
  for _, player in ipairs(Player.getPlayers()) do
    if player.steam_id == steam_id then
      return player
    end
  end
  return nil
end