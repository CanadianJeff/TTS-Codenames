size =
{
  -- Small buttons
  small =
  {
    width     = 1400,
    height    = 500,
    font_size = 400
  },

  -- Medium buttons
  medium =
  {
    width     = 4200,
    height    = 500,
    font_size = 400
  },

  -- Hidden button
  hidden =
  {
    width     = 0,
    height    = 0,
    font_size = 0
  }
}

queue = {}

function onLoad()
  drawQueue()
end

function drawQueue()
  -- Panel title
  makeText("Codemaster Queue", {x = -6.75, z = 0}, {1, 1, 1}, 500)

  -- Join/leave buttons
  makeButton("Join", "join", {x = 6.75, z = 3.2}, size.small, nil)
  makeButton("Stay", "stay", {x = 6.75, z = 0}, size.small, nil)
  makeButton("Leave", "leave", {x = 6.75, z = -3.2}, size.small, nil)

  -- Player buttons
  for i = 1, 10, 1 do
    makeButton("ree", "nullFunction", {x = (-6.35 + (1.1 * i)), z = 0}, size.hidden, nil)
  end
end

function nullFunction()
  -- Nothing to see here
end

function redrawQueue()
  for i = 4, 13, 1 do
    local queuePos = queue[i - 3]
    self.editButton({
      index     = i,
      label     = (queuePos != nil and queuePos.steam_name or ""),
      width     = (queuePos != nil and size.medium.width or size.hidden.width),
      height    = (queuePos != nil and size.medium.height or size.hidden.height),
      font_size = (queuePos != nil and size.medium.font_size or size.hidden.font_size),
      color     = (queuePos != nil and (queuePos.stay and {0.8, 1, 0.8} or {1, 1, 1}) or {1, 1, 1})
    })
  end
end


function join(o, color)
  -- Black can't join the queue
  if color == "Black" then
    Player[color].broadcast("Please switch colors before attempting to join the codemaster queue.", redColor)
    return
  end

  for _, player in ipairs(queue) do
    if Player[color].steam_id == player.steam_id then
      if player.stay then
        player.stay = false
        redrawQueue()
      end
      return
    end
  end

  local playerInfo =
  {
    steam_id   = Player[color].steam_id,
    steam_name = Player[color].steam_name,
    stay       = false
  }

  table.insert(queue,playerInfo)
  redrawQueue()
end

function stay(o, color)
  if color == "Black" then
    Player[color].broadcast("Please switch colors before attempting to join the codemaster queue.", redColor)
    return
  end

  for _, player in ipairs(queue) do
    if Player[color].steam_id == player.steam_id then
      if not player.stay then
        player.stay = true
        redrawQueue()
      end
      return
    end
  end

  local playerInfo =
  {
    steam_id   = Player[color].steam_id,
    steam_name = Player[color].steam_name,
    stay       = true
  }

  table.insert(queue,playerInfo)
  redrawQueue()
end

function leave(o, color)
  if color == "Black" then
    return
  end

  for i, player in ipairs(queue) do
    if Player[color].steam_id == player.steam_id then
      table.remove(queue, i)
      break
    end
  end

  redrawQueue()
end

function findPlayerBySteamID(steam_id)
  for _, player in ipairs(Player.getPlayers()) do
    if player.steam_id == steam_id then
      return player
    end
  end
end

function findPlayerByColor(color)
  for _, player in ipairs(Player.getPlayers()) do
    if player.color == color then
      return player
    end
  end
end

function sleep(t)
  for i=1,t do
    coroutine.yield(0)
  end
end

function pruneQueue()
  -- Track to see if a player was removed from the queue
  local changesMade = false

  -- Remove all spectators from the queue
  for _, player in ipairs(Player.getSpectators()) do
    for i, queuePlayer in ipairs(queue) do
      if player.steam_id == queuePlayer.steam_id then
        table.remove(queue, i)
        changesMade = true
      end
    end
  end

  -- Remove black player from the queue
  for i, queuePlayer in ipairs(queue) do
    if Player["Black"] == queuePlayer.steam_id then
      table.remove(queue, i)
      changesMade = true
    end
  end

  -- Only redraw the queue if a change was made
  if changesMade then
    redrawQueue()
  end
end

function swapCodemasters()
  -- Prune the queue for invalid entries
  pruneQueue()

  local seats = {"Blue", "Red"}
  local lowPriority = {}
  local prioritizedSeats = {}
  -- First pass - looking for empty seats
  for i, seat in ipairs(seats) do
    if not Player[seat].seated then
      debugMessage('No player sitting in ' .. seat .. '. Added to prioritization queue.')
      table.insert(prioritizedSeats, seats[i])
    else
      -- Is the new codemaster already sitting in red/blue?
      local skip = false

      for j = 1, #queue, 1 do
        -- We want the first two values at max. Anything after that we can discard
        if j > 2 then
          break
        end

        if Player[seat].steam_id == queue[j].steam_id then
          -- Codemaster queued for next game is already sitting in a codemaster seat
          debugMessage(Player[seat].steam_name .. ' is already sitting in ' .. seat .. '. Removing seat from queue.')

          skip = true

          -- Remove or re-queue codemaster
          if queue[j].stay then
            table.insert(queue, table.remove(queue, j))
          else
            table.remove(queue, j)
          end
        end
      end

      if not skip then
        debugMessage('Adding ' .. seat .. ' to the end of the prioritization queue. Someone is sitting here')
        table.insert(lowPriority, seats[i])
      end
    end
  end

  -- Join the low priority with the prioritized
  for _, seat in ipairs(lowPriority) do
    table.insert(prioritizedSeats, seat)
  end

  local queueNum = #queue

  shufflingPlayers = true

  while #prioritizedSeats > 0 and queueNum > 0 do
    local currentSeat = table.remove(prioritizedSeats, 1)
    local newCodemaster = findPlayerBySteamID(queue[1].steam_id)

    if Player[currentSeat].seated then
      -- A player is currently seated here - swap them
      local oldCodemaster = findPlayerByColor(currentSeat)
      local colorSwap = newCodemaster.color

      debugMessage('Swapping ' .. oldCodemaster.steam_name .. ' (' .. oldCodemaster.color .. ') and ' .. newCodemaster.steam_name .. '(' .. newCodemaster.color ..').')

      oldCodemaster.changeColor("Grey")
      sleep(1)
      newCodemaster.changeColor(currentSeat)
      sleep(1)
      oldCodemaster.changeColor(colorSwap)
      sleep(1)
    else
      -- No player is seated here - move the new codemaster in
      debugMessage('Moving ' .. newCodemaster.steam_name .. ' to ' .. currentSeat .. ' (empty).')
      newCodemaster.changeColor(currentSeat)
      sleep(1)
    end

    -- Remove or re-queue codemaster
    if queue[1].stay then
      table.insert(queue, table.remove(queue, 1))
    else
      table.remove(queue, 1)
    end

    -- Decrease number of unique codemasters
    queueNum = queueNum - 1
  end

  shufflingPlayers = false

  redrawQueue()

  -- Delay afterwards
  sleep(25)

  -- Continue game setup if in progress
  debugMessage('Game is starting.')
  Global.call("startGame")

  return 1
end

function startShuffle()
  -- Prune the queue for invalid entries
  pruneQueue()

  local players = {}
  local seats = {}
  local queueEnabled = Global.call("isQueueEnabled")

  -- Remove any spectators or black
  for _, player in ipairs(Player.getPlayers()) do
    if player.color != "Grey" and player.color != "Black" then
      table.insert(players, player)
    end
  end

  if #players > 0 then

    local seatColors = {
      "Blue",
      "Red",
      "Teal",
      "Orange",
      "Purple",
      "Yellow",
      "Green",
      "Pink",
      "White",
      "Brown"
    }
    local randSide = math.random(0,1)

    -- Remove the colors we don't need
    for i, seat in ipairs(seatColors) do
      if i <= #players then
        if #players % 2 != 0 and i == #players then
          table.insert(seats, seatColors[i + randSide])
        else
          table.insert(seats, seatColors[i])
        end
      else
        break
      end
    end

    shufflingPlayers = true

    -- Stand all player
    for _, player in ipairs(players) do
      player.changeColor("Grey")
      sleep(1)
    end

    -- Get the number of players in the queue
    local numQueue = #queue

    -- Sit players back down
    for i, seat in ipairs(seats) do
      if queueEnabled and i <= 2 and numQueue > 0 then
        for index, player in ipairs(players) do
          if player.steam_id == queue[1].steam_id then
            table.remove(players, index)
            if queue[1].stay then
              table.insert(queue, table.remove(queue, 1))
            else
              table.remove(queue, 1)
            end
            player.changeColor(seat)
            numQueue = numQueue - 1
            break
          end
        end
      else
        local randPlayer = table.remove(players, math.random(1, #players))
        randPlayer.changeColor(seat)
      end
      sleep(1)
    end

    shufflingPlayers = false

    redrawQueue()

    -- Delay afterwards
    sleep(25)

    -- Continue game setup if in progress
    Global.call("startGame")
  else
    Player[color].broadcast("Not enough players to shuffle!", redColor)
  end

  return 1
end

function makeButton(buttonLabel, callback, position, size, colorScheme)
  local attributes =
  {
    click_function  = callback,
    function_owner  = self,
    label           = buttonLabel,
    position        = {x = position.x, y = 0.2, z = position.z},
    rotation        = {0, 270, 0},
    width           = size.width,
    height          = size.height,
    font_size       = size.font_size
  }
  if colorScheme != nil then
    attributes.font_color   = {1, 1, 1}
    attributes.color        = buttonColor[colorScheme][1]
    attributes.hover_color  = buttonColor[colorScheme][2]
    attributes.press_color  = buttonColor[colorScheme][3]
  end
  self.createButton(attributes)
end

function makeText(contents, position, color, size)
  local text =
  {
    label           = contents,
    click_function  = "nullFunction",
    function_owner  = self,
    position        = {position.x, 0.2, position.z},
    rotation        = {0, 270, 0},
    height          = 0,
    width           = 0,
    font_color      = color,
    font_size       = size
  }
  self.createButton(text)
end

function onPlayerChangeColor(color)
  if not shufflingPlayers then
    print('changed: ' .. color)
    pruneQueue()
  end
end

function onPlayerDisconnect(player_id)
  pruneQueue()
end

function debugMessage(msg)
  print(os.date("%x") .. " " .. os.date("%X") .. " | [DEBUG] - " .. msg)
end

--[[  if not shufflingPlayers then
    for _, player in ipairs(Player.getPlayers()) do
      if player.color == "Black" or player.color == "Grey" then
        for i, queuePlayer in ipairs(codemasterQueue) do
          if player.steam_id == queuePlayer.steam_id then
            table.remove(codemasterQueue, i)
            break
          end
        end
      end
    end
    redrawQueue()
  end]]